#include <list>
#include <string>
#include <unordered_map>

using namespace std;

namespace tool {

  // Basic option defition.
  typedef struct opt_def {
    char type;            // Option type: (s)short/(l)long.
    string value;
    string keyword;  // The keyword which should be looked up in the
    // message (if) produced when using this option.
  } opt_def;

  class find_opts {
    public:
      string utility;               // Utility under test
      string line;                  // An individual line in a man-page.
      string buffer;
      string opt_ident = ".It Fl";  // Identifier for an option in man page.
      string opt_name;              // Name of the option.
      int opt_pos;                  // Starting index of the (identified) option.
      // TODO: Support for long_opts
      string opt_list;              // String of all the accepted options.
      list<opt_def> identified_opt_list;       // List of identified option definitions (opt_def's).
      list<opt_def>::iterator identified_opt_list_iter;
      unordered_map<string, opt_def> opt_map; // Map "option value" to "option definition".
      unordered_map<string, opt_def>::iterator opt_map_iter;

      // Insert a list of user-defined option definitions
      // into a hashmap. These specific option definitions
      // are the ones which one can be easily tested.
      void insert_opts();

      // For the utility under test, find the valid supported
      // options present in the hashmap generated by insert_opts()
      // and return them in a form of string which can be passed
      // directly to getopt().
      string check_opts();
  };
}
