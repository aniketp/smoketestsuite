#include <list>
#include <string>
#include <unordered_map>

using namespace std;

namespace tool {

  // Option relation which maps option names
  // to the identifier in their descriptions.
  typedef struct opt_rel {
    char type;            // Option type: (s)short/(l)long.
    string value;         // Name of the option.
    string keyword;       // The keyword which should be looked up in the
                          // message (if) produced when using this option.
  } opt_rel;

  class opt_def {
    public:
      string utility;               // Utility under test
      // TODO: Add support for long_opts
      string opt_list;       // String of all the accepted options.

      unordered_map<string, opt_rel> opt_map;   // Map "option value" to "option definition".
      unordered_map<string, opt_rel>::iterator opt_map_iter;

      // Insert a list of user-defined option definitions
      // into a hashmap. These specific option definitions
      // are the ones which one can be easily tested.
      void insert_opts();

      // For the utility under test, find the valid supported
      // options present in the hashmap generated by insert_opts()
      // and return them in a form of string which can be passed
      // directly to getopt().
      list<opt_rel*> check_opts();
  };
}
